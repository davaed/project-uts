import { Fragment, useState, useContext } from 'react'
import { useRouter } from 'next/router'
import Head from 'next/head'
import MultiRef from 'react-multi-ref'

import { MongoClient } from 'mongodb'
import ContextProvider, { GlobalContext } from '../../state/contextProvider'

import Layout from '../../components/common/Layout'
import Modal from '../../components/Modal'
import ConfirmButton from '../../components/common/ConfirmButton'

function ItemMenus({ selectedMenu, restaurant }) {
  return selectedMenu.map((item, _) => {
    if (item.restaurant === restaurant)
      return item.menus.map((menu, index) => (
        <div className='grid grid-cols-3 gap-8 mx-4' key={index}>
          <div className='col-span-2 flex justify-start break-all'>
            1 &#215; {menu.name}
          </div>
          <div className='col-span-1 flex justify-end'>{menu.price}</div>
        </div>
      ))
  })
}

function RestaurantMenus({ setSelectedMenu, selectedMenu, restaurant }) {
  const items = new MultiRef()

  function selectMenu(index, restaurantName, name, price) {
    items.map.forEach((el) => {
      if (el.attributes['aria-label'].value !== `menu-${index}`) return

      // remove selected menu from order, if it's already selected
      if (el.classList.contains('active')) {
        el.classList.toggle('active')
        filterSelectedMenu(index, restaurantName)
        return
      }

      // add selected menu to order
      if (selectedMenu.length === 0) {
        el.classList.toggle('active')
        updateSelected(restaurantName, index, name, price)
        return
      }

      // update selected menu of selected restaurant order
      if (selectedMenu.length > 0) {
        el.classList.toggle('active')
        updateSelectedMenu(restaurantName, index, name, price)
        return
      }

      return
    })
  }

  function filterSelectedMenu(menuIndex, restaurantName) {
    const updated = selectedMenu.map((item) => {
      return {
        ...item,
        menus: item.menus.filter(({ index }) => {
          if (item.restaurant === restaurantName) {
            return index !== menuIndex
          } else return item.menus
        }),
      }
    })
    setSelectedMenu(updated)
  }

  function updateSelectedMenu(restaurantName, index, name, price) {
    selectedMenu.filter((item) => {
      if (item.restaurant === restaurantName) {
        item.menus.push({ index, name, price, status: 'pending' })
        setSelectedMenu([...selectedMenu])
      } else {
        updateSelected(restaurantName, index, name, price)
      }
    })
  }

  function updateSelected(restaurantName, index, name, price) {
    setSelectedMenu([
      ...selectedMenu,
      {
        restaurant: restaurantName,
        menus: [{ index, name, price, status: 'pending' }],
      },
    ])
  }

  function isSelectedMenu(userSelectedMenu) {
    const setSelected = selectedMenu.some((item) => {
      return item.menus.some((menu) => menu.name === userSelectedMenu.name)
    })
    return setSelected ? 'active' : ''
  }

  return restaurant.menus.map((item, index) => (
    <div
      className={`${isSelectedMenu(
        item
      )} cursor-pointer border border-[#eaeaea] rounded-md transition ease-in-out duration-200 p-4 hover:border-[#0070f3] hover:text-[#0070f3]`}
      key={`${index}`}
      ref={items.ref(index)}
      aria-label={`menu-${index}`}
      onClick={() => selectMenu(index, restaurant.name, item.name, item.price)}
    >
      <h2 className='capitalize font-semibold text-xl'>{item.name}</h2>
      <p>
        Rp. {item.price}
        <small>/pcs</small>
      </p>
    </div>
  ))
}

export default function RestaurantDetail(props) {
  const router = useRouter()
  const { restaurant } = router.query

  const [goFood, setGoFood] = useContext(GlobalContext)
  const [isConfirmed, setIsConfirmed] = useState(false)

  function calculateTotalPrice() {
    let totalPrice = 0

    goFood.forEach((item) => {
      if (item.restaurant === restaurant)
        item.menus.forEach((menu) => {
          totalPrice += menu.price
        })
    })
    return totalPrice
  }

  function pay() {
    goFood.map((item) => {
      if (item.restaurant === restaurant) {
        item.menus.forEach((menu) => {
          menu.status = ['paid', 'failed'][Math.floor(Math.random() * 2)]
        })
      }
    })
  }

  return (
    <Fragment>
      <Head>
        <title>GO-FOOD - {props.restaurant.name}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Layout
        page={`${props.restaurant.name} Restaurant`}
        description={`This is ${props.restaurant.name} restaurant`}
      >
        {isConfirmed && (
          <Modal
            totalPrice={calculateTotalPrice()}
            setIsConfirmed={setIsConfirmed}
            onClickPay={pay}
          >
            <ItemMenus selectedMenu={goFood} restaurant={restaurant} />
          </Modal>
        )}

        <ConfirmButton
          itemsLength={goFood.length}
          setIsConfirmed={setIsConfirmed}
          title={'Please begin by selecting one of our menu options.'}
        />
        <div className='grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-4 pb-8 mx-5 lg:mx-10'>
          <RestaurantMenus
            setSelectedMenu={setGoFood}
            selectedMenu={goFood}
            restaurant={props.restaurant}
          />
        </div>
      </Layout>
    </Fragment>
  )
}

export async function getStaticPaths() {
  const client = await MongoClient.connect(
    `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@cluster0.ec2ky.mongodb.net/${process.env.MONGODB_DATABASE}?retryWrites=true&w=majority`
  )
  const db = client.db()
  const collections = db.collection('go-food')
  const restaurants = await collections.find().toArray()
  client.close()

  const paths = restaurants.map((item) => ({
    params: { restaurant: item.name },
  }))

  return {
    paths,
    fallback: false,
  }
}

export async function getStaticProps(context) {
  const param = context.params.restaurant

  const client = await MongoClient.connect(
    `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@cluster0.ec2ky.mongodb.net/${process.env.MONGODB_DATABASE}?retryWrites=true&w=majority`
  )
  const db = client.db()
  const collections = db.collection('go-food')
  const restaurants = await collections.findOne({ name: param })
  client.close()

  return {
    props: {
      restaurant: { ...restaurants, _id: restaurants._id.toString() },
    },
    revalidate: 1,
  }
}
