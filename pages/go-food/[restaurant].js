import Head from 'next/head'
import MultiRef from 'react-multi-ref'

import { MongoClient } from 'mongodb'
import { Fragment, useState } from 'react'
import Layout from '../../components/common/Layout'
import ModalMenus from '../../components/ModalMenus'

export default function RestaurantDetail(props) {
  const _items = new MultiRef()
  const [selected, setSelected] = useState([])
  const [confirmed, setConfirmed] = useState(false)

  function selectRestaurantMenu(index) {
    _items.map.forEach((element) => {
      if (element.attributes['aria-label'].value == `menu-${index}`) {
        if (element.classList.contains('active')) {
          // remove the selected items from the array, if it is already in the array
          setSelected(selected.filter((item) => item.index !== index))
        } else {
          // append new item to the array, added `index` key to the selected item
          setSelected([
            ...selected,
            { ...props.restaurant.menus[index], index: index },
          ])
        }

        element.classList.toggle('active')
        return true
      }
    })
  }

  return (
    <Fragment>
      <Head>
        <title>GoFood - {props.restaurant.name}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Layout
        skips={true}
        page={`${props.restaurant.name} Restaurant`}
        description={`This is ${props.restaurant.name} restaurant`}
      >
        <Fragment>
          {selected.length > 0 && (
            <div className='flex justify-end'>
              <button
                className='cursor-pointer rounded-md border border-[#eaeaea] hover:border-[#00a770] hover:text-[#ffffff] hover:bg-[#00a770] transition ease-in-out duration-200 px-6 py-2.5'
                onClick={() => setConfirmed(true)}
              >
                Confirm choice
              </button>
            </div>
          )}

          {confirmed && (
            <ModalMenus selectedMenus={selected} setConfirmed={setConfirmed} />
          )}

          <div className='grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 xl:grid-cols-4 gap-6 my-12'>
            {props.restaurant.menus.map((item, index) => (
              <div
                className='cursor-pointer rounded-md border border-[#eaeaea] hover:border-[#0070f3] hover:text-[#0070f3] transition ease-in-out duration-200 p-4'
                key={index}
                ref={_items.ref(index)}
                aria-label={`menu-${index}`}
                onClick={() => selectRestaurantMenu(index)}
              >
                <h2 className='capitalize font-semibold text-xl'>
                  {item.name}
                </h2>
                <p>
                  {item.price}$
                  <small>/pcs</small>
                </p>
              </div>
            ))}
          </div>
        </Fragment>
      </Layout>
    </Fragment>
  )
}

export async function getStaticPaths() {
  const client = await MongoClient.connect(
    `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@cluster0.ec2ky.mongodb.net/${process.env.MONGODB_DATABASE}?retryWrites=true&w=majority`
  )
  const db = client.db()
  const collections = db.collection('go-food')
  const restaurants = await collections.find().toArray()
  client.close()

  const paths = restaurants.map((item) => ({
    params: { restaurant: item.name },
  }))

  return {
    paths,
    fallback: false,
  }
}

export async function getStaticProps(context) {
  const param = context.params.restaurant

  const client = await MongoClient.connect(
    `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@cluster0.ec2ky.mongodb.net/${process.env.MONGODB_DATABASE}?retryWrites=true&w=majority`
  )
  const db = client.db()
  const collections = db.collection('go-food')
  const restaurants = await collections.findOne({ name: param })
  client.close()

  return {
    props: {
      restaurant: { ...restaurants, _id: restaurants._id.toString() },
    },
    revalidate: 1,
  }
}
