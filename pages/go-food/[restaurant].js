import { Fragment, useState } from 'react'
import Head from 'next/head'
import MultiRef from 'react-multi-ref'

import { MongoClient } from 'mongodb'

import Layout from '../../components/common/Layout'
import Modal from '../../components/Modal'
import ConfirmButton from '../../components/common/ConfirmButton'

function RestaurantMenus({ setSelectedMenu, selectedMenu, restaurantMenus }) {
  const items = new MultiRef()

  function selectMenu(index, name, price) {
    items.map.forEach((el) => {
      if (el.attributes['aria-label'].value === `menu-${index}`) {
        if (el.classList.contains('active')) {
          setSelectedMenu(selectedMenu.filter((item) => item.index !== index))
        } else {
          setSelectedMenu([...selectedMenu, { index, name, price }])
        }
        el.classList.toggle('active')
      }
      return
    })
  }

  return restaurantMenus.map((item, index) => (
    <div
      className='cursor-pointer border border-[#eaeaea] rounded-md transition ease-in-out duration-200 p-4 hover:border-[#0070f3] hover:text-[#0070f3]'
      key={`${index}`}
      ref={items.ref(index)}
      aria-label={`menu-${index}`}
      onClick={() => selectMenu(index, item.name, item.price)}
    >
      <h2 className='capitalize font-semibold text-xl'>{item.name}</h2>
      <p>
        Rp. {item.price}
        <small>/pcs</small>
      </p>
    </div>
  ))
}

function ItemMenus({ selectedMenu }) {
  return selectedMenu.map((item, index) => (
    <div className='grid grid-cols-3 gap-8 mx-4' key={index}>
      <div className='col-span-2 flex justify-start break-all'>
        1 &#215; {item.name}
      </div>
      <div className='col-span-1 flex justify-end'>{item.price}</div>
    </div>
  ))
}

export default function RestaurantDetail(props) {
  const [selectedMenu, setSelectedMenu] = useState([])
  const [isConfirmed, setIsConfirmed] = useState(false)

  return (
    <Fragment>
      <Head>
        <title>GO-FOOD - {props.restaurant.name}</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      <Layout
        page={`${props.restaurant.name} Restaurant`}
        description={`This is ${props.restaurant.name} restaurant`}
      >
        {isConfirmed && (
          <Modal
            totalPrice={selectedMenu.reduce(
              (acc, item) => acc + item.price,
              0
            )}
            setIsConfirmed={setIsConfirmed}
          >
            <ItemMenus selectedMenu={selectedMenu} />
          </Modal>
        )}

        <ConfirmButton
          itemsLength={selectedMenu.length}
          setIsConfirmed={setIsConfirmed}
          title={'Please begin by selecting one of our menu options.'}
        />
        <div className='grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 2xl:grid-cols-4 gap-4 pb-8 mx-5 lg:mx-10'>
          <RestaurantMenus
            setSelectedMenu={setSelectedMenu}
            selectedMenu={selectedMenu}
            restaurantMenus={props.restaurant.menus}
          />
        </div>
      </Layout>
    </Fragment>
  )
}

export async function getStaticPaths() {
  const client = await MongoClient.connect(
    `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@cluster0.ec2ky.mongodb.net/${process.env.MONGODB_DATABASE}?retryWrites=true&w=majority`
  )
  const db = client.db()
  const collections = db.collection('go-food')
  const restaurants = await collections.find().toArray()
  client.close()

  const paths = restaurants.map((item) => ({
    params: { restaurant: item.name },
  }))

  return {
    paths,
    fallback: false,
  }
}

export async function getStaticProps(context) {
  const param = context.params.restaurant

  const client = await MongoClient.connect(
    `mongodb+srv://${process.env.MONGODB_USERNAME}:${process.env.MONGODB_PASSWORD}@cluster0.ec2ky.mongodb.net/${process.env.MONGODB_DATABASE}?retryWrites=true&w=majority`
  )
  const db = client.db()
  const collections = db.collection('go-food')
  const restaurants = await collections.findOne({ name: param })
  client.close()

  return {
    props: {
      restaurant: { ...restaurants, _id: restaurants._id.toString() },
    },
    revalidate: 1,
  }
}
