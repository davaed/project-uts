import { Fragment, useState, useEffect, useContext } from 'react'
import Head from 'next/head'

import { GlobalContext as GoRideContext } from '../../context/goRideProvider'

import WrapperContent from '../../components/go-ride/WrapperContent.component'
import Loading from '../../components/common/Loading.component'

import {
  fetchNearestLocation,
  getAddressFromLocation,
} from '../../utils/getLocation'

function NotGoRideApp({ APIKEY }) {
  const [goRide, setGoRide] = useContext(GoRideContext)
  // this temporary coordinate for storing user destination, because the `react-leaflet`
  // library will always re-render the map component, and the coordinates will be reset to null
  const [temporaryCoordinates, setTemporaryCoordinates] = useState({
    pickUpPoint: { lat: 0, lng: 0, address: '', updated: false },
    destination: { lat: 0, lng: 0, address: '', updated: false },
    price: 0,
    status: 'pending',
  })
  const [loadingStatus, setLoadingStatus] = useState(true)

  async function updateVisitorCoordinates(position) {
    await fetchNearestLocation(
      APIKEY,
      position.coords.latitude,
      position.coords.longitude
    ).then((res) => {
      const adddress = getAddressFromLocation(res)

      setTemporaryCoordinates({
        ...temporaryCoordinates,
        pickUpPoint: {
          lat: position.coords.latitude,
          lng: position.coords.longitude,
          address: adddress,
          updated: true,
        },
      })
      setLoadingStatus(false)
    })
  }

  useEffect(() => {
    navigator.geolocation.getCurrentPosition((position) => {
      updateVisitorCoordinates(position)
    })
  }, [])

  return (
    <Fragment>
      <Head>
        <title>GO-RIDE - NOT GOJEK</title>
        <meta name='description' content='Generated by create next app' />
        <link rel='icon' href='/favicon.ico' />
      </Head>

      {!loadingStatus ? (
        <WrapperContent
          geoMapApiKey={APIKEY}
          temporary={{
            coordinates: temporaryCoordinates,
            setCoordinates: setTemporaryCoordinates,
          }}
          goRideData={goRide}
          updateGoRideData={setGoRide}
        />
      ) : (
        <Fragment>
          <Loading>
            <div className='font-medium text-2xl text-[#d4e157]'>
              Searching for your location
            </div>
          </Loading>
        </Fragment>
      )}
    </Fragment>
  )
}

export function getStaticProps() {
  return {
    props: {
      APIKEY: process.env.MAPQUESTAPI,
    },
  }
}

export default NotGoRideApp
